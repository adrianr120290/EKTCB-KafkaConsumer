/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mx.baz.avro.model.liabilities;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Cheque extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2170535676041871937L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cheque\",\"namespace\":\"mx.baz.avro.model.liabilities\",\"fields\":[{\"name\":\"numeroCheque\",\"type\":\"string\",\"example\":\"1234567\"},{\"name\":\"nombreBeneficiario\",\"type\":[\"null\",\"string\"],\"default\":null,\"example\":\"127\",\"minLength\":3,\"maxLength\":3},{\"name\":\"claveBanco\",\"type\":\"string\",\"example\":\"127\",\"minLength\":3,\"maxLength\":3},{\"name\":\"tipoCheque\",\"type\":\"string\",\"example\":\"127\",\"minLength\":3,\"maxLength\":3}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Cheque> ENCODER =
      new BinaryMessageEncoder<Cheque>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Cheque> DECODER =
      new BinaryMessageDecoder<Cheque>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Cheque> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Cheque> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Cheque> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Cheque>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Cheque to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Cheque from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Cheque instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Cheque fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence numeroCheque;
   private java.lang.CharSequence nombreBeneficiario;
   private java.lang.CharSequence claveBanco;
   private java.lang.CharSequence tipoCheque;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cheque() {}

  /**
   * All-args constructor.
   * @param numeroCheque The new value for numeroCheque
   * @param nombreBeneficiario The new value for nombreBeneficiario
   * @param claveBanco The new value for claveBanco
   * @param tipoCheque The new value for tipoCheque
   */
  public Cheque(java.lang.CharSequence numeroCheque, java.lang.CharSequence nombreBeneficiario, java.lang.CharSequence claveBanco, java.lang.CharSequence tipoCheque) {
    this.numeroCheque = numeroCheque;
    this.nombreBeneficiario = nombreBeneficiario;
    this.claveBanco = claveBanco;
    this.tipoCheque = tipoCheque;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return numeroCheque;
    case 1: return nombreBeneficiario;
    case 2: return claveBanco;
    case 3: return tipoCheque;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: numeroCheque = (java.lang.CharSequence)value$; break;
    case 1: nombreBeneficiario = (java.lang.CharSequence)value$; break;
    case 2: claveBanco = (java.lang.CharSequence)value$; break;
    case 3: tipoCheque = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'numeroCheque' field.
   * @return The value of the 'numeroCheque' field.
   */
  public java.lang.CharSequence getNumeroCheque() {
    return numeroCheque;
  }


  /**
   * Sets the value of the 'numeroCheque' field.
   * @param value the value to set.
   */
  public void setNumeroCheque(java.lang.CharSequence value) {
    this.numeroCheque = value;
  }

  /**
   * Gets the value of the 'nombreBeneficiario' field.
   * @return The value of the 'nombreBeneficiario' field.
   */
  public java.lang.CharSequence getNombreBeneficiario() {
    return nombreBeneficiario;
  }


  /**
   * Sets the value of the 'nombreBeneficiario' field.
   * @param value the value to set.
   */
  public void setNombreBeneficiario(java.lang.CharSequence value) {
    this.nombreBeneficiario = value;
  }

  /**
   * Gets the value of the 'claveBanco' field.
   * @return The value of the 'claveBanco' field.
   */
  public java.lang.CharSequence getClaveBanco() {
    return claveBanco;
  }


  /**
   * Sets the value of the 'claveBanco' field.
   * @param value the value to set.
   */
  public void setClaveBanco(java.lang.CharSequence value) {
    this.claveBanco = value;
  }

  /**
   * Gets the value of the 'tipoCheque' field.
   * @return The value of the 'tipoCheque' field.
   */
  public java.lang.CharSequence getTipoCheque() {
    return tipoCheque;
  }


  /**
   * Sets the value of the 'tipoCheque' field.
   * @param value the value to set.
   */
  public void setTipoCheque(java.lang.CharSequence value) {
    this.tipoCheque = value;
  }

  /**
   * Creates a new Cheque RecordBuilder.
   * @return A new Cheque RecordBuilder
   */
  public static mx.baz.avro.model.liabilities.Cheque.Builder newBuilder() {
    return new mx.baz.avro.model.liabilities.Cheque.Builder();
  }

  /**
   * Creates a new Cheque RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cheque RecordBuilder
   */
  public static mx.baz.avro.model.liabilities.Cheque.Builder newBuilder(mx.baz.avro.model.liabilities.Cheque.Builder other) {
    if (other == null) {
      return new mx.baz.avro.model.liabilities.Cheque.Builder();
    } else {
      return new mx.baz.avro.model.liabilities.Cheque.Builder(other);
    }
  }

  /**
   * Creates a new Cheque RecordBuilder by copying an existing Cheque instance.
   * @param other The existing instance to copy.
   * @return A new Cheque RecordBuilder
   */
  public static mx.baz.avro.model.liabilities.Cheque.Builder newBuilder(mx.baz.avro.model.liabilities.Cheque other) {
    if (other == null) {
      return new mx.baz.avro.model.liabilities.Cheque.Builder();
    } else {
      return new mx.baz.avro.model.liabilities.Cheque.Builder(other);
    }
  }

  /**
   * RecordBuilder for Cheque instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cheque>
    implements org.apache.avro.data.RecordBuilder<Cheque> {

    private java.lang.CharSequence numeroCheque;
    private java.lang.CharSequence nombreBeneficiario;
    private java.lang.CharSequence claveBanco;
    private java.lang.CharSequence tipoCheque;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mx.baz.avro.model.liabilities.Cheque.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.numeroCheque)) {
        this.numeroCheque = data().deepCopy(fields()[0].schema(), other.numeroCheque);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nombreBeneficiario)) {
        this.nombreBeneficiario = data().deepCopy(fields()[1].schema(), other.nombreBeneficiario);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.claveBanco)) {
        this.claveBanco = data().deepCopy(fields()[2].schema(), other.claveBanco);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tipoCheque)) {
        this.tipoCheque = data().deepCopy(fields()[3].schema(), other.tipoCheque);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Cheque instance
     * @param other The existing instance to copy.
     */
    private Builder(mx.baz.avro.model.liabilities.Cheque other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.numeroCheque)) {
        this.numeroCheque = data().deepCopy(fields()[0].schema(), other.numeroCheque);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nombreBeneficiario)) {
        this.nombreBeneficiario = data().deepCopy(fields()[1].schema(), other.nombreBeneficiario);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.claveBanco)) {
        this.claveBanco = data().deepCopy(fields()[2].schema(), other.claveBanco);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tipoCheque)) {
        this.tipoCheque = data().deepCopy(fields()[3].schema(), other.tipoCheque);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'numeroCheque' field.
      * @return The value.
      */
    public java.lang.CharSequence getNumeroCheque() {
      return numeroCheque;
    }


    /**
      * Sets the value of the 'numeroCheque' field.
      * @param value The value of 'numeroCheque'.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder setNumeroCheque(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.numeroCheque = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'numeroCheque' field has been set.
      * @return True if the 'numeroCheque' field has been set, false otherwise.
      */
    public boolean hasNumeroCheque() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'numeroCheque' field.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder clearNumeroCheque() {
      numeroCheque = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nombreBeneficiario' field.
      * @return The value.
      */
    public java.lang.CharSequence getNombreBeneficiario() {
      return nombreBeneficiario;
    }


    /**
      * Sets the value of the 'nombreBeneficiario' field.
      * @param value The value of 'nombreBeneficiario'.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder setNombreBeneficiario(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nombreBeneficiario = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nombreBeneficiario' field has been set.
      * @return True if the 'nombreBeneficiario' field has been set, false otherwise.
      */
    public boolean hasNombreBeneficiario() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nombreBeneficiario' field.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder clearNombreBeneficiario() {
      nombreBeneficiario = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'claveBanco' field.
      * @return The value.
      */
    public java.lang.CharSequence getClaveBanco() {
      return claveBanco;
    }


    /**
      * Sets the value of the 'claveBanco' field.
      * @param value The value of 'claveBanco'.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder setClaveBanco(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.claveBanco = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'claveBanco' field has been set.
      * @return True if the 'claveBanco' field has been set, false otherwise.
      */
    public boolean hasClaveBanco() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'claveBanco' field.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder clearClaveBanco() {
      claveBanco = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tipoCheque' field.
      * @return The value.
      */
    public java.lang.CharSequence getTipoCheque() {
      return tipoCheque;
    }


    /**
      * Sets the value of the 'tipoCheque' field.
      * @param value The value of 'tipoCheque'.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder setTipoCheque(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tipoCheque = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tipoCheque' field has been set.
      * @return True if the 'tipoCheque' field has been set, false otherwise.
      */
    public boolean hasTipoCheque() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tipoCheque' field.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.Cheque.Builder clearTipoCheque() {
      tipoCheque = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Cheque build() {
      try {
        Cheque record = new Cheque();
        record.numeroCheque = fieldSetFlags()[0] ? this.numeroCheque : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.nombreBeneficiario = fieldSetFlags()[1] ? this.nombreBeneficiario : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.claveBanco = fieldSetFlags()[2] ? this.claveBanco : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tipoCheque = fieldSetFlags()[3] ? this.tipoCheque : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Cheque>
    WRITER$ = (org.apache.avro.io.DatumWriter<Cheque>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Cheque>
    READER$ = (org.apache.avro.io.DatumReader<Cheque>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.numeroCheque);

    if (this.nombreBeneficiario == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.nombreBeneficiario);
    }

    out.writeString(this.claveBanco);

    out.writeString(this.tipoCheque);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.numeroCheque = in.readString(this.numeroCheque instanceof Utf8 ? (Utf8)this.numeroCheque : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.nombreBeneficiario = null;
      } else {
        this.nombreBeneficiario = in.readString(this.nombreBeneficiario instanceof Utf8 ? (Utf8)this.nombreBeneficiario : null);
      }

      this.claveBanco = in.readString(this.claveBanco instanceof Utf8 ? (Utf8)this.claveBanco : null);

      this.tipoCheque = in.readString(this.tipoCheque instanceof Utf8 ? (Utf8)this.tipoCheque : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.numeroCheque = in.readString(this.numeroCheque instanceof Utf8 ? (Utf8)this.numeroCheque : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nombreBeneficiario = null;
          } else {
            this.nombreBeneficiario = in.readString(this.nombreBeneficiario instanceof Utf8 ? (Utf8)this.nombreBeneficiario : null);
          }
          break;

        case 2:
          this.claveBanco = in.readString(this.claveBanco instanceof Utf8 ? (Utf8)this.claveBanco : null);
          break;

        case 3:
          this.tipoCheque = in.readString(this.tipoCheque instanceof Utf8 ? (Utf8)this.tipoCheque : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










