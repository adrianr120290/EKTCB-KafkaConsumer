/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mx.baz.avro.model.liabilities;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TransferData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -738071831254556936L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransferData\",\"namespace\":\"mx.baz.avro.model.liabilities\",\"fields\":[{\"name\":\"transferencia\",\"type\":{\"type\":\"record\",\"name\":\"Transferencia\",\"fields\":[{\"name\":\"nombre\",\"type\":[\"null\",\"string\"],\"default\":null,\"example\":\"Alberto Garcia\"},{\"name\":\"numeroCuenta\",\"type\":\"string\",\"example\":\"1234567\"},{\"name\":\"tipoCuenta\",\"type\":\"string\",\"example\":\"02\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransferData> ENCODER =
      new BinaryMessageEncoder<TransferData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransferData> DECODER =
      new BinaryMessageDecoder<TransferData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransferData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransferData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransferData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransferData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransferData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransferData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransferData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransferData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private mx.baz.avro.model.liabilities.Transferencia transferencia;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransferData() {}

  /**
   * All-args constructor.
   * @param transferencia The new value for transferencia
   */
  public TransferData(mx.baz.avro.model.liabilities.Transferencia transferencia) {
    this.transferencia = transferencia;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transferencia;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transferencia = (mx.baz.avro.model.liabilities.Transferencia)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transferencia' field.
   * @return The value of the 'transferencia' field.
   */
  public mx.baz.avro.model.liabilities.Transferencia getTransferencia() {
    return transferencia;
  }


  /**
   * Sets the value of the 'transferencia' field.
   * @param value the value to set.
   */
  public void setTransferencia(mx.baz.avro.model.liabilities.Transferencia value) {
    this.transferencia = value;
  }

  /**
   * Creates a new TransferData RecordBuilder.
   * @return A new TransferData RecordBuilder
   */
  public static mx.baz.avro.model.liabilities.TransferData.Builder newBuilder() {
    return new mx.baz.avro.model.liabilities.TransferData.Builder();
  }

  /**
   * Creates a new TransferData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransferData RecordBuilder
   */
  public static mx.baz.avro.model.liabilities.TransferData.Builder newBuilder(mx.baz.avro.model.liabilities.TransferData.Builder other) {
    if (other == null) {
      return new mx.baz.avro.model.liabilities.TransferData.Builder();
    } else {
      return new mx.baz.avro.model.liabilities.TransferData.Builder(other);
    }
  }

  /**
   * Creates a new TransferData RecordBuilder by copying an existing TransferData instance.
   * @param other The existing instance to copy.
   * @return A new TransferData RecordBuilder
   */
  public static mx.baz.avro.model.liabilities.TransferData.Builder newBuilder(mx.baz.avro.model.liabilities.TransferData other) {
    if (other == null) {
      return new mx.baz.avro.model.liabilities.TransferData.Builder();
    } else {
      return new mx.baz.avro.model.liabilities.TransferData.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransferData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransferData>
    implements org.apache.avro.data.RecordBuilder<TransferData> {

    private mx.baz.avro.model.liabilities.Transferencia transferencia;
    private mx.baz.avro.model.liabilities.Transferencia.Builder transferenciaBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mx.baz.avro.model.liabilities.TransferData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transferencia)) {
        this.transferencia = data().deepCopy(fields()[0].schema(), other.transferencia);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasTransferenciaBuilder()) {
        this.transferenciaBuilder = mx.baz.avro.model.liabilities.Transferencia.newBuilder(other.getTransferenciaBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TransferData instance
     * @param other The existing instance to copy.
     */
    private Builder(mx.baz.avro.model.liabilities.TransferData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transferencia)) {
        this.transferencia = data().deepCopy(fields()[0].schema(), other.transferencia);
        fieldSetFlags()[0] = true;
      }
      this.transferenciaBuilder = null;
    }

    /**
      * Gets the value of the 'transferencia' field.
      * @return The value.
      */
    public mx.baz.avro.model.liabilities.Transferencia getTransferencia() {
      return transferencia;
    }


    /**
      * Sets the value of the 'transferencia' field.
      * @param value The value of 'transferencia'.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.TransferData.Builder setTransferencia(mx.baz.avro.model.liabilities.Transferencia value) {
      validate(fields()[0], value);
      this.transferenciaBuilder = null;
      this.transferencia = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transferencia' field has been set.
      * @return True if the 'transferencia' field has been set, false otherwise.
      */
    public boolean hasTransferencia() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'transferencia' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public mx.baz.avro.model.liabilities.Transferencia.Builder getTransferenciaBuilder() {
      if (transferenciaBuilder == null) {
        if (hasTransferencia()) {
          setTransferenciaBuilder(mx.baz.avro.model.liabilities.Transferencia.newBuilder(transferencia));
        } else {
          setTransferenciaBuilder(mx.baz.avro.model.liabilities.Transferencia.newBuilder());
        }
      }
      return transferenciaBuilder;
    }

    /**
     * Sets the Builder instance for the 'transferencia' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public mx.baz.avro.model.liabilities.TransferData.Builder setTransferenciaBuilder(mx.baz.avro.model.liabilities.Transferencia.Builder value) {
      clearTransferencia();
      transferenciaBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transferencia' field has an active Builder instance
     * @return True if the 'transferencia' field has an active Builder instance
     */
    public boolean hasTransferenciaBuilder() {
      return transferenciaBuilder != null;
    }

    /**
      * Clears the value of the 'transferencia' field.
      * @return This builder.
      */
    public mx.baz.avro.model.liabilities.TransferData.Builder clearTransferencia() {
      transferencia = null;
      transferenciaBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransferData build() {
      try {
        TransferData record = new TransferData();
        if (transferenciaBuilder != null) {
          try {
            record.transferencia = this.transferenciaBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("transferencia"));
            throw e;
          }
        } else {
          record.transferencia = fieldSetFlags()[0] ? this.transferencia : (mx.baz.avro.model.liabilities.Transferencia) defaultValue(fields()[0]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransferData>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransferData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransferData>
    READER$ = (org.apache.avro.io.DatumReader<TransferData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.transferencia.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.transferencia == null) {
        this.transferencia = new mx.baz.avro.model.liabilities.Transferencia();
      }
      this.transferencia.customDecode(in);

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.transferencia == null) {
            this.transferencia = new mx.baz.avro.model.liabilities.Transferencia();
          }
          this.transferencia.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










